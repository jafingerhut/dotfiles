#!/bin/bash
#_(
   #_DEPS is same format as deps.edn. Multiline is okay.
   DEPS='{:deps {
                 org.clojure/clojure {:mvn/version "1.10.1"}
                }}'
   
   #_You can put other options here
   OPTS='-J-Xms256m -J-Xmx256m -J-client'
   
   exec clojure $OPTS -Sdeps "$DEPS" -M "$0" "$@"
)

(require '[clojure.java.io :as io]
         '[clojure.java.shell :as sh]
         '[clojure.edn :as edn]
         '[clojure.string :as str]
         '[clojure.pprint :as pp])

(println "Hello, world!")

;; Command line arguments are available as a sequence of strings in
;; *command-line-args*

;;(println "(class *command-line-args*)=" (class *command-line-args*))
(println "*file*=" *file*)
(println (count *command-line-args*) "command line args were given:")
(doall (map-indexed (fn [idx arg]
                      (printf "%2d: '%s'\n" idx arg))
                    *command-line-args*))

(println)
(println "values of some other Clojure Vars that may or may not be of interest:")
(println "*allow-unresolved-vars*=" *allow-unresolved-vars*)
(println "*clojure-version*=" *clojure-version*)
(println "*compile-files*=" *compile-files*)
(println "*compile-path*=" *compile-path*)
(println "*compiler-options*=" *compiler-options*)
(println "*data-readers*=" *data-readers*)
(println "*default-data-reader-fn*=" *default-data-reader-fn*)
(println "*flush-on-newline*=" *flush-on-newline*)
(println "*fn-loader*=" *fn-loader*)
(println "*in*=" *in*)
(println "*math-context*=" *math-context*)
(println "*ns*=" *ns*)
(println "*out*=" *out*)
(println "*print-dup*=" *print-dup*)
(println "*print-length*=" *print-length*)
(println "*print-level*=" *print-level*)
(println "*print-meta*=" *print-meta*)
(println "*print-namespace-maps*=" *print-namespace-maps*)
(println "*print-readably*=" *print-readably*)
(println "*read-eval*=" *read-eval*)
(println "*reader-resolver*=" *reader-resolver*)
(println "*use-context-classloader*=" *use-context-classloader*)
(println "*warn-on-reflection*=" *warn-on-reflection*)

(println)
(println "Attempt to run 'openssl md5 <filename>' on command line args:")
(println)
;; One way to invoke commands is to use clojure.java.shell/sh
;; One can also use Java ProcessBuilder APIs:
;; https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html
;; or conch: https://github.com/clj-commons/conch
(doseq [fname *command-line-args*]
  (let [sh-ret (sh/sh "openssl" "md5" fname)]
    (pp/pprint sh-ret)))

;; If you use clojure.java.shell/sh or anything else that creates a
;; future, then typically the program will execute, then 'hang'
;; silently for about 60 seconds before it exits.  You can avoid this
;; by making the following call when you are done, or (System/exit
;; <some-number>)
(shutdown-agents)
